{"version":3,"file":"crc.js","mappings":"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","sources":["webpack://ecubuspro/webpack/bootstrap","webpack://ecubuspro/webpack/runtime/define property getters","webpack://ecubuspro/webpack/runtime/hasOwnProperty shorthand","webpack://ecubuspro/webpack/runtime/make namespace object","webpack://ecubuspro/./src/main/worker/crcUtil.ts","webpack://ecubuspro/./src/main/worker/crc.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable no-var */\nclass CrcUtil {\n  public static Reflect8(val: number) {\n    var resByte = 0\n\n    for (var i = 0; i < 8; i++) {\n      if ((val & (1 << i)) != 0) {\n        resByte |= (1 << (7 - i)) & 0xff\n      }\n    }\n    return resByte\n  }\n\n  public static Reflect16(val: number) {\n    var resByte = 0\n\n    for (var i = 0; i < 16; i++) {\n      if ((val & (1 << i)) != 0) {\n        resByte |= (1 << (15 - i)) & 0xffff\n      }\n    }\n\n    return resByte\n  }\n\n  public static Reflect32(val: number) {\n    var resByte = 0\n\n    for (var i = 0; i < 32; i++) {\n      if ((val & (1 << i)) != 0) {\n        resByte |= (1 << (31 - i)) & 0xffffffff\n      }\n    }\n\n    return resByte\n  }\n\n  public static ReflectGeneric(val: number, width: number) {\n    var resByte = 0\n    for (var i = 0; i < width; i++) {\n      if ((val & (1 << i)) != 0) {\n        resByte |= 1 << (width - 1 - i)\n      }\n    }\n    return resByte\n  }\n}\n\nexport default CrcUtil\n","/* eslint-disable prefer-const */\n/* eslint-disable no-var */\nimport CrcUtil from './crcUtil'\n\n/**\n * @category Util\n */\nexport class CRC {\n  private _width!: number\n  private _name!: string\n  private _polynomial!: number\n  private _initialVal!: number\n  private _finalXorVal!: number\n  private _inputReflected!: boolean\n  private _resultReflected!: boolean\n  private static _list: CRC[]\n\n  private _crcTable!: number[]\n  private _castMask!: number\n  private _msbMask!: number\n\n  public get width(): number {\n    return this._width\n  }\n  public set width(v: number) {\n    this._width = v\n    switch (v) {\n      case 8:\n        this._castMask = 0xff\n        break\n      case 16:\n        this._castMask = 0xffff\n        break\n      case 32:\n        this._castMask = 0xffffffff\n        break\n      default:\n        throw 'Invalid CRC width'\n    }\n    this._msbMask = 0x01 << (v - 1)\n  }\n\n  public get name(): string {\n    return this._name\n  }\n  public set name(v: string) {\n    this._name = v\n  }\n\n  public get polynomial(): number {\n    return this._polynomial\n  }\n  public set polynomial(v: number) {\n    this._polynomial = v\n  }\n\n  public get initial(): number {\n    return this._initialVal\n  }\n  public set initial(v: number) {\n    this._initialVal = v\n  }\n\n  public get finalXor(): number {\n    return this._finalXorVal\n  }\n  public set finalXor(v: number) {\n    this._finalXorVal = v\n  }\n\n  public get inputReflected(): boolean {\n    return this._inputReflected\n  }\n  public set inputReflected(v: boolean) {\n    this._inputReflected = v\n  }\n\n  public get resultReflected(): boolean {\n    return this._resultReflected\n  }\n  public set resultReflected(v: boolean) {\n    this._resultReflected = v\n  }\n\n  /**\n   * Creates an instance of the CRC (Cyclic Redundancy Check) class.\n   *\n   * @param name - The name of the CRC algorithm.\n   * @param width - The width of the CRC in bits.\n   * @param polynomial - The polynomial used for the CRC calculation.\n   * @param initial - The initial value for the CRC calculation.\n   * @param finalXor - The value to XOR with the final CRC value.\n   * @param inputReflected - Whether the input bytes should be reflected.\n   * @param resultReflected - Whether the result should be reflected.\n   */\n  constructor(\n    name: string,\n    width: number,\n    polynomial: number,\n    initial: number,\n    finalXor: number,\n    inputReflected: boolean,\n    resultReflected: boolean\n  ) {\n    this.width = width\n    this.name = name\n    this.polynomial = polynomial\n    this.initial = initial\n    this.finalXor = finalXor\n    this.inputReflected = inputReflected\n    this.resultReflected = resultReflected\n  }\n\n  /**\n   * Returns a list of default CRC configurations.\n   *\n   * The list includes various CRC algorithms with their respective parameters:\n   * - Name: The name of the CRC algorithm.\n   * - Width: The width of the CRC (number of bits).\n   * - Polynomial: The polynomial used for the CRC calculation.\n   * - Initial Value: The initial value for the CRC calculation.\n   * - Final XOR Value: The value to XOR with the final CRC value.\n   * - Reflect Input: Whether to reflect the input bytes.\n   * - Reflect Output: Whether to reflect the output CRC value.\n   *\n   * @returns {CRC[]} An array of CRC configurations.\n   */\n  public static get defaults(): CRC[] {\n    if (!this._list) {\n      this._list = [\n        new CRC('CRC8', 8, 0x07, 0x00, 0x00, false, false),\n        new CRC('CRC8_SAE_J1850', 8, 0x1d, 0xff, 0xff, false, false),\n        new CRC('CRC8_SAE_J1850_ZERO', 8, 0x1d, 0x00, 0x00, false, false),\n        new CRC('CRC8_8H2F', 8, 0x2f, 0xff, 0xff, false, false),\n        new CRC('CRC8_CDMA2000', 8, 0x9b, 0xff, 0x00, false, false),\n        new CRC('CRC8_DARC', 8, 0x39, 0x00, 0x00, true, true),\n        new CRC('CRC8_DVB_S2', 8, 0xd5, 0x00, 0x00, false, false),\n        new CRC('CRC8_EBU', 8, 0x1d, 0xff, 0x00, true, true),\n        new CRC('CRC8_ICODE', 8, 0x1d, 0xfd, 0x00, false, false),\n        new CRC('CRC8_ITU', 8, 0x07, 0x00, 0x55, false, false),\n        new CRC('CRC8_MAXIM', 8, 0x31, 0x00, 0x00, true, true),\n        new CRC('CRC8_ROHC', 8, 0x07, 0xff, 0x00, true, true),\n        new CRC('CRC8_WCDMA', 8, 0x9b, 0x00, 0x00, true, true),\n        new CRC('CRC16_CCIT_ZERO', 16, 0x1021, 0x0000, 0x0000, false, false),\n        new CRC('CRC16_ARC', 16, 0x8005, 0x0000, 0x0000, true, true),\n        new CRC('CRC16_AUG_CCITT', 16, 0x1021, 0x1d0f, 0x0000, false, false),\n        new CRC('CRC16_BUYPASS', 16, 0x8005, 0x0000, 0x0000, false, false),\n        new CRC('CRC16_CCITT_FALSE', 16, 0x1021, 0xffff, 0x0000, false, false),\n        new CRC('CRC16_CDMA2000', 16, 0xc867, 0xffff, 0x0000, false, false),\n        new CRC('CRC16_DDS_110', 16, 0x8005, 0x800d, 0x0000, false, false),\n        new CRC('CRC16_DECT_R', 16, 0x0589, 0x0000, 0x0001, false, false),\n        new CRC('CRC16_DECT_X', 16, 0x0589, 0x0000, 0x0000, false, false),\n        new CRC('CRC16_DNP', 16, 0x3d65, 0x0000, 0xffff, true, true),\n        new CRC('CRC16_EN_13757', 16, 0x3d65, 0x0000, 0xffff, false, false),\n        new CRC('CRC16_GENIBUS', 16, 0x1021, 0xffff, 0xffff, false, false),\n        new CRC('CRC16_MAXIM', 16, 0x8005, 0x0000, 0xffff, true, true),\n        new CRC('CRC16_MCRF4XX', 16, 0x1021, 0xffff, 0x0000, true, true),\n        new CRC('CRC16_RIELLO', 16, 0x1021, 0xb2aa, 0x0000, true, true),\n        new CRC('CRC16_T10_DIF', 16, 0x8bb7, 0x0000, 0x0000, false, false),\n        new CRC('CRC16_TELEDISK', 16, 0xa097, 0x0000, 0x0000, false, false),\n        new CRC('CRC16_TMS37157', 16, 0x1021, 0x89ec, 0x0000, true, true),\n        new CRC('CRC16_USB', 16, 0x8005, 0xffff, 0xffff, true, true),\n        new CRC('CRC16_A', 16, 0x1021, 0xc6c6, 0x0000, true, true),\n        new CRC('CRC16_KERMIT', 16, 0x1021, 0x0000, 0x0000, true, true),\n        new CRC('CRC16_MODBUS', 16, 0x8005, 0xffff, 0x0000, true, true),\n        new CRC('CRC16_X_25', 16, 0x1021, 0xffff, 0xffff, true, true),\n        new CRC('CRC16_XMODEM', 16, 0x1021, 0x0000, 0x0000, false, false),\n        new CRC('CRC32', 32, 0x04c11db7, 0xffffffff, 0xffffffff, true, true),\n        new CRC('CRC32_BZIP2', 32, 0x04c11db7, 0xffffffff, 0xffffffff, false, false),\n        new CRC('CRC32_C', 32, 0x1edc6f41, 0xffffffff, 0xffffffff, true, true),\n        new CRC('CRC32_D', 32, 0xa833982b, 0xffffffff, 0xffffffff, true, true),\n        new CRC('CRC32_MPEG2', 32, 0x04c11db7, 0xffffffff, 0x00000000, false, false),\n        new CRC('CRC32_POSIX', 32, 0x04c11db7, 0x00000000, 0xffffffff, false, false),\n        new CRC('CRC32_Q', 32, 0x814141ab, 0x00000000, 0x00000000, false, false),\n        new CRC('CRC32_JAMCRC', 32, 0x04c11db7, 0xffffffff, 0x00000000, true, true),\n        new CRC('CRC32_XFER', 32, 0x000000af, 0x00000000, 0x00000000, false, false)\n      ]\n    }\n    return this._list\n  }\n\n  /**\n   * Generates the CRC table used for calculating the CRC checksum.\n   *\n   * This method initializes the `_crcTable` array with 256 entries, each representing\n   * a precomputed CRC value for a given byte. The table is generated based on the\n   * polynomial and width specified by the instance's `_polynomial` and `_width` properties.\n   *\n   * The algorithm iterates over each possible byte value (0-255) and calculates the\n   * corresponding CRC value by shifting and XORing with the polynomial. The result is\n   * stored in the `_crcTable` array.\n   *\n   * @remarks\n   * This method assumes that the instance has the following properties defined:\n   * - `_width`: The width of the CRC (number of bits).\n   * - `_castMask`: A mask used to cast the CRC value to the correct width.\n   * - `_msbMask`: A mask representing the most significant bit of the CRC.\n   * - `_polynomial`: The polynomial used for CRC calculation.\n   *\n   * @example\n   * ```typescript\n   * const crcInstance = new CrcClass();\n   * crcInstance._width = 32;\n   * crcInstance._castMask = 0xFFFFFFFF;\n   * crcInstance._msbMask = 0x80000000;\n   * crcInstance._polynomial = 0x04C11DB7;\n   * crcInstance.makeCrcTable();\n   * console.log(crcInstance._crcTable);\n   * ```\n   */\n  private makeCrcTable() {\n    this._crcTable = new Array(256)\n\n    for (var divident = 0; divident < 256; divident++) {\n      var currByte = (divident << (this._width - 8)) & this._castMask\n      for (var bit = 0; bit < 8; bit++) {\n        if ((currByte & this._msbMask) != 0) {\n          currByte <<= 1\n          currByte ^= this._polynomial\n        } else {\n          currByte <<= 1\n        }\n      }\n      this._crcTable[divident] = currByte & this._castMask\n    }\n  }\n\n  private makeCrcTableReversed() {\n    this._crcTable = new Array(256)\n\n    for (var divident = 0; divident < 256; divident++) {\n      var reflectedDivident = CrcUtil.Reflect8(divident)\n\n      var currByte = (reflectedDivident << (this._width - 8)) & this._castMask\n\n      for (var bit = 0; bit < 8; bit++) {\n        if ((currByte & this._msbMask) != 0) {\n          currByte <<= 1\n          currByte ^= this._polynomial\n        } else {\n          currByte <<= 1\n        }\n      }\n\n      currByte = CrcUtil.ReflectGeneric(currByte, this.width)\n\n      this._crcTable[divident] = currByte & this._castMask\n    }\n  }\n\n  /**\n   * Computes the CRC (Cyclic Redundancy Check) value for the given input bytes.\n   *\n   * @param {number[] | Buffer} bytes - The input data as an array of numbers or a Buffer.\n   * @returns {number} - The computed CRC value.\n   */\n  public compute(bytes: number[] | Buffer) {\n    if (!this._crcTable) this.makeCrcTable()\n    var crc = this._initialVal\n    for (var i = 0; i < bytes.length; i++) {\n      var curByte = bytes[i] & 0xff\n\n      if (this.inputReflected) {\n        curByte = CrcUtil.Reflect8(curByte)\n      }\n\n      /* update the MSB of crc value with next input byte */\n      crc = (crc ^ (curByte << (this._width - 8))) & this._castMask\n      /* this MSB byte value is the index into the lookup table */\n      var pos = (crc >> (this.width - 8)) & 0xff\n      /* shift out this index */\n      crc = (crc << 8) & this._castMask\n      /* XOR-in remainder from lookup table using the calculated index */\n      crc = (crc ^ this._crcTable[pos]) & this._castMask\n    }\n\n    if (this.resultReflected) {\n      crc = CrcUtil.ReflectGeneric(crc, this.width)\n    }\n    return (crc ^ this._finalXorVal) & this._castMask\n  }\n\n  public computeBuffer(bytes: number[] | Buffer) {\n    let val = this.compute(bytes)\n    if (this.width === 8) {\n      return Buffer.from([val])\n    } else if (this.width === 16) {\n      let b = Buffer.alloc(2)\n      b.writeUInt16BE(val, 0)\n      return b\n    } else if (this.width === 32) {\n      let b = Buffer.alloc(4)\n      b.writeUInt32BE(val, 0)\n      return b\n    } else {\n      throw new Error('Unsupported length')\n    }\n  }\n\n  public get table() {\n    return this._crcTable\n  }\n\n  /**\n   * Retrieves a CRC object from the defaults list by its name.\n   *\n   * @param name - The name of the CRC object to find.\n   * @returns The CRC object with the specified name, or `undefined` if not found.\n   */\n  public static default(name: string): CRC | undefined {\n    return CRC.defaults.find((o: CRC): boolean => o.name === name)\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Reflect8","val","resByte","i","Reflect16","Reflect32","ReflectGeneric","width","CRC","_width","_name","_polynomial","_initialVal","_finalXorVal","_inputReflected","_resultReflected","static","_crcTable","_castMask","_msbMask","this","v","name","polynomial","initial","finalXor","inputReflected","resultReflected","constructor","defaults","_list","makeCrcTable","Array","divident","currByte","bit","makeCrcTableReversed","compute","bytes","crc","length","curByte","pos","computeBuffer","Buffer","from","b","alloc","writeUInt16BE","writeUInt32BE","Error","table","find"],"sourceRoot":""}